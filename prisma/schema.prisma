generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @unique @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  username         String?
  imageUrl         String?
  bio              String?
  onboarded        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  hashedpassword   String?
  accounts         Account[]
  sessions         Session[]
  financeAccounts  FinanceAccount[]
  categories       Category[]
  subscriptionId   String?
  customerId       String?
  variantId        Int?
  currentPeriodEnd DateTime?

  @@unique([name])
  @@index([id])
}

model FinanceAccount {
  id           String        @id @unique @default(cuid())
  plaidId      String?
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  transactions Transaction[]

  @@index([id])
}

model Category {
  id           String        @id @unique @default(cuid())
  plaidId      String?
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  transactions Transaction[]

  @@index([id])
}

model Transaction {
  id          String         @id @unique @default(cuid())
  amount      Int
  payee       String
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  accountId   String
  accountRef  FinanceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId  String?
  categoryRef Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
